---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to
# ✅ Global Development Rules (適用於所有專案)

## 📄 文件與需求
- 在開始新任務前，**確認是否有 PRD（產品需求文件）** 並緊密遵循。
- **查閱專案說明與設計文件**，確保清楚需求與背景。

## 🧠 程式碼風格與結構
- 所有程式碼需包含**說明「為何」與「如何」運作**的註解。
- 每個檔案應**不超過 300 行**，並避免巨石函式（拆解成小模組）。
- 避免重複程式碼，重構重複邏輯。
- 使用一致的命名規範：
  - 類別：`PascalCase`
  - 函式/變數：`camelCase`
  - 檔案與資料夾：`kebab-case`
- 每行程式碼不超過 **100 字元**。
- **避免留下未使用的代碼或註解區塊**。

## ✅ 測試與品質
- 所有核心功能必須撰寫單元測試。
- 所有測試需通過後才能部署或提交。
- 如測試全部通過且有重大改動，允許自動提交（Git）。

## ⚠️ 錯誤處理與紀錄
- 對所有關鍵操作需有**適當錯誤處理與日誌紀錄**。
- 發生難以追蹤錯誤時，寫 log 並檢查 console。

## 💻 開發與執行
- 修改後必須重新啟動 server 以測試是否正常。
- 同時間只保留一個執行中的 server，**先 kill 舊的再開新的**。

## 🧪 重構與版本控制
- **除非明確指示，不可大改既有架構或樣式。**
- 若遇重大錯誤並解決，請新增 .md 紀錄檔至 /fixes/ 目錄。
- 不得留下 .env 檔案於版本控制。
- 不得隨意建立新分支或提交未追蹤檔案。

## 📚 模式與學習
- 所有使用的設計模式、技術與元件，需整理於 README.md 中。
- 尋找重複錯誤時，先檢查 fixes 與 log 記錄。
- 若不確定解法，可使用 firecrawl 工具做研究。